//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SocketAutoTest.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ModelContract")]
    public interface ModelContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/AskOrders", ReplyAction="http://tempuri.org/ModelContract/AskOrdersResponse")]
        System.Data.DataTable AskOrders(string OrderId, string WsNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/AskOrders", ReplyAction="http://tempuri.org/ModelContract/AskOrdersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> AskOrdersAsync(string OrderId, string WsNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/NewTask", ReplyAction="http://tempuri.org/ModelContract/NewTaskResponse")]
        string NewTask(string OrderId, string CposCode, string CInvCode, string TaskType, float Count, string Adress, string WsNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/NewTask", ReplyAction="http://tempuri.org/ModelContract/NewTaskResponse")]
        System.Threading.Tasks.Task<string> NewTaskAsync(string OrderId, string CposCode, string CInvCode, string TaskType, float Count, string Adress, string WsNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/MoveBack", ReplyAction="http://tempuri.org/ModelContract/MoveBackResponse")]
        string MoveBack(string ShelfNo, string WsNo, string SOri, string EOri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/MoveBack", ReplyAction="http://tempuri.org/ModelContract/MoveBackResponse")]
        System.Threading.Tasks.Task<string> MoveBackAsync(string ShelfNo, string WsNo, string SOri, string EOri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/PickAgain", ReplyAction="http://tempuri.org/ModelContract/PickAgainResponse")]
        string PickAgain(string ShelfNo, string WsNo, string SOri, string E);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/PickAgain", ReplyAction="http://tempuri.org/ModelContract/PickAgainResponse")]
        System.Threading.Tasks.Task<string> PickAgainAsync(string ShelfNo, string WsNo, string SOri, string E);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/ManuShelfTask", ReplyAction="http://tempuri.org/ModelContract/ManuShelfTaskResponse")]
        string ManuShelfTask(string ShelfNo, string WsNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/ManuShelfTask", ReplyAction="http://tempuri.org/ModelContract/ManuShelfTaskResponse")]
        System.Threading.Tasks.Task<string> ManuShelfTaskAsync(string ShelfNo, string WsNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/NewTasks", ReplyAction="http://tempuri.org/ModelContract/NewTasksResponse")]
        System.Data.DataTable NewTasks(System.Data.DataTable dtOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/NewTasks", ReplyAction="http://tempuri.org/ModelContract/NewTasksResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> NewTasksAsync(System.Data.DataTable dtOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/MoveOver", ReplyAction="http://tempuri.org/ModelContract/MoveOverResponse")]
        string MoveOver(string ShelfNo, string PEnd, string SOri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/MoveOver", ReplyAction="http://tempuri.org/ModelContract/MoveOverResponse")]
        System.Threading.Tasks.Task<string> MoveOverAsync(string ShelfNo, string PEnd, string SOri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/CRC", ReplyAction="http://tempuri.org/ModelContract/CRCResponse")]
        byte CRC(byte[] byt, int Length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/CRC", ReplyAction="http://tempuri.org/ModelContract/CRCResponse")]
        System.Threading.Tasks.Task<byte> CRCAsync(byte[] byt, int Length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/RomoteControl", ReplyAction="http://tempuri.org/ModelContract/RomoteControlResponse")]
        string RomoteControl(byte Function, string WsNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ModelContract/RomoteControl", ReplyAction="http://tempuri.org/ModelContract/RomoteControlResponse")]
        System.Threading.Tasks.Task<string> RomoteControlAsync(byte Function, string WsNo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ModelContractChannel : SocketAutoTest.ServiceReference1.ModelContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelContractClient : System.ServiceModel.ClientBase<SocketAutoTest.ServiceReference1.ModelContract>, SocketAutoTest.ServiceReference1.ModelContract {
        
        public ModelContractClient() {
        }
        
        public ModelContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModelContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable AskOrders(string OrderId, string WsNo) {
            return base.Channel.AskOrders(OrderId, WsNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> AskOrdersAsync(string OrderId, string WsNo) {
            return base.Channel.AskOrdersAsync(OrderId, WsNo);
        }
        
        public string NewTask(string OrderId, string CposCode, string CInvCode, string TaskType, float Count, string Adress, string WsNo) {
            return base.Channel.NewTask(OrderId, CposCode, CInvCode, TaskType, Count, Adress, WsNo);
        }
        
        public System.Threading.Tasks.Task<string> NewTaskAsync(string OrderId, string CposCode, string CInvCode, string TaskType, float Count, string Adress, string WsNo) {
            return base.Channel.NewTaskAsync(OrderId, CposCode, CInvCode, TaskType, Count, Adress, WsNo);
        }
        
        public string MoveBack(string ShelfNo, string WsNo, string SOri, string EOri) {
            return base.Channel.MoveBack(ShelfNo, WsNo, SOri, EOri);
        }
        
        public System.Threading.Tasks.Task<string> MoveBackAsync(string ShelfNo, string WsNo, string SOri, string EOri) {
            return base.Channel.MoveBackAsync(ShelfNo, WsNo, SOri, EOri);
        }
        
        public string PickAgain(string ShelfNo, string WsNo, string SOri, string E) {
            return base.Channel.PickAgain(ShelfNo, WsNo, SOri, E);
        }
        
        public System.Threading.Tasks.Task<string> PickAgainAsync(string ShelfNo, string WsNo, string SOri, string E) {
            return base.Channel.PickAgainAsync(ShelfNo, WsNo, SOri, E);
        }
        
        public string ManuShelfTask(string ShelfNo, string WsNo) {
            return base.Channel.ManuShelfTask(ShelfNo, WsNo);
        }
        
        public System.Threading.Tasks.Task<string> ManuShelfTaskAsync(string ShelfNo, string WsNo) {
            return base.Channel.ManuShelfTaskAsync(ShelfNo, WsNo);
        }
        
        public System.Data.DataTable NewTasks(System.Data.DataTable dtOrders) {
            return base.Channel.NewTasks(dtOrders);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> NewTasksAsync(System.Data.DataTable dtOrders) {
            return base.Channel.NewTasksAsync(dtOrders);
        }
        
        public string MoveOver(string ShelfNo, string PEnd, string SOri) {
            return base.Channel.MoveOver(ShelfNo, PEnd, SOri);
        }
        
        public System.Threading.Tasks.Task<string> MoveOverAsync(string ShelfNo, string PEnd, string SOri) {
            return base.Channel.MoveOverAsync(ShelfNo, PEnd, SOri);
        }
        
        public byte CRC(byte[] byt, int Length) {
            return base.Channel.CRC(byt, Length);
        }
        
        public System.Threading.Tasks.Task<byte> CRCAsync(byte[] byt, int Length) {
            return base.Channel.CRCAsync(byt, Length);
        }
        
        public string RomoteControl(byte Function, string WsNo) {
            return base.Channel.RomoteControl(Function, WsNo);
        }
        
        public System.Threading.Tasks.Task<string> RomoteControlAsync(byte Function, string WsNo) {
            return base.Channel.RomoteControlAsync(Function, WsNo);
        }
    }
}
